<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spriteMaskVertical</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spriteMaskVertical</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init input variables
left = vk_left;
right = vk_right;
jump = vk_up;

dash = vk_space;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init movement variables
facing = RIGHT;

hsp = 0;
vsp = 0;
climb = 3;

maxhspReg = 5;
maxhspDash = 10;
currentMaxhsp = maxhspReg;

jumpheight = -15;

deltahsp = 0.5;
deltavsp = 0.75;
fric = 0.35;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init camera variables
camx = x;
camy = y;
camspeed = 10;          // Dividing factor for dx, dy of camera
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init ability variables

// Global abilities
global.playerCanJump = true;                // Flags if player can jump
global.playerCanHorizJump = true;           // Flags if player can do a long jump
global.playerAdditionalJumps = 5;           // # of jumps allowed in midair (shared by both reg. and long jump)

global.playerHorizJumpHsp = 30;             // The hsp of a long jump (vsp=0)
global.playerHorizJumpTime = 10;            // Amount of time long jump is sustained

global.playerCanDash = true;                // Flags if player can dash
global.playerDashStamina = 60;              // Max amount of stamina player has (60 = 1 second)
global.playerStaminaRefill = 0.5;           // Increment at which stamina regenerates

// Local flags
currentDashStamina = global.playerDashStamina;
currentJumps = 0;

horizJumpWaited = global.playerHorizJumpTime + 1;   // Time waited so far to flag if jump has ended

horizDoubleTapInt = 15;                             // Interval window for a double-tap
readyForNextTap = false;
horizDoubleTapWaited = horizDoubleTapInt + 1;       // Tracking for the double-tap
horizJump = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update camera

// Find distance (delta) and direction
var dist = point_distance(x, y, camx, camy) / camspeed;
var dir = point_direction(x, y, camx, camy);

// Calculate dx and dy
var dx = dist * cos(degtorad(dir));
var dy = dist * sin(degtorad(dir));

// Apply delta to camera
camx -= dx;
camy += dy;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Apply camera to view
view_xview[0] = round(camx - (view_wport[0] / 2));
view_yview[0] = round(camy - (view_hport[0] / 2));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset variables
input = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interpret Input

// Horizontal movement
if (keyboard_check(left))
{
    // Move left
    hsp -= deltahsp;
    input = true;
    facing = LEFT;
}

if (keyboard_check(right))
{
    // Move left
    hsp += deltahsp;
    input = true;
    facing = RIGHT;
}

// Get input if on ground
if (place_meeting(x, y + 1, parentGround))
{
    // Dashing
    if (keyboard_check(dash))
    {
        // Enable dashing
        currentMaxhsp = maxhspDash;
    }
    else
    {
        // Disable dashing
        currentMaxhsp = maxhspReg;
    }
}
else
{
    // Falling push-down
    if (vsp &lt; 0 &amp;&amp; !keyboard_check(jump))
    {
        // Push down
        vsp += deltavsp;
    }
}

// Jumping
if (keyboard_check_pressed(jump))
{
    // Jump
    vsp = jumpheight;
}

// Update double-tap flag
horizDoubleTapWaited++;
horizJumpWaited++;

// Find if double-tap is executed
if (keyboard_check_released(dash))
{
    if (horizDoubleTapWaited &lt;= horizDoubleTapInt)
    {
        // Reset counter for second tap
        horizDoubleTapWaited = 0;
    }
}

if (keyboard_check_pressed(dash))
{
    if (horizDoubleTapWaited &lt;= horizDoubleTapInt)
    {
        // Flag Dash Jump
        horizJump = true;
        horizJumpWaited = 0;
        horizDoubleTapWaited = horizDoubleTapInt + 1;
        
        // Initiate Dash Jump
        hsp = global.playerHorizJumpHsp * facing;
        vsp = 0;
    }
    else
    {
        // Reset counter for first tap
        horizDoubleTapWaited = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Apply environmental restraints

// Apply friction
if (!input &amp;&amp; place_meeting(x, y + 1, parentGround))
{
    if (hsp &lt; 0)
    {
        if (hsp &gt;= -fric)
            // Reset
            hsp = 0;
        else
            // Compensate right
            hsp += fric;
    }
    else if (hsp &gt; 0)
    {
        if (hsp &lt;= fric)
            // Reset
            hsp = 0;
        else
            // Compensate left
            hsp -= fric;
    }
}

// If horizontal jump is not initiated
if (!horizJump)
{
    // Apply gravity
    vsp += deltavsp;
    
    // Restrict hspeed movement
    if (hsp &lt; -currentMaxhsp)
    {
        // If recovering from dashing
        if (hsp &lt; -currentMaxhsp - deltahsp)
            // Smooth back movement (mult. by 2 for compensation)
            hsp += deltahsp * 2;
        else
            // Cap movement
            hsp = -currentMaxhsp;
    }
    
    if (hsp &gt; currentMaxhsp)
    {
        // If recovering from dashing
        if (hsp &gt; currentMaxhsp + deltahsp)
            // Smooth back movement (mult. by 2 for compensation)
            hsp -= deltahsp * 2;
        else
            // Cap movement
            hsp = currentMaxhsp;
    }
}
else
{
    // Cap horizontal jump speed
    hsp = min(max(hsp, -global.playerHorizJumpHsp), global.playerHorizJumpHsp);
    
    // Undo if needed
    if (horizJumpWaited &gt; global.playerHorizJumpTime)
        // Reset
        horizJump = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update movement

// Update hsp
repeat(ceil(abs(hsp)))
{
    var move = sign(hsp);
    
    // Check if colliding
    if (place_meeting(x + move, y, parentGround))
    {
        // Check if upward slope
        var solved = false;
        for (var i = 1; i &lt;= climb; i++)
        {
            // If no collision
            if (!place_meeting(x + move, y - i, parentGround))
            {
                // Move
                x += move;
                y -= i;
                solved = true;
                break;
            }
        }
        
        // Stop; a wall!
        if (!solved)
        {
            hsp = 0;
        }
    }
    else
    {
        // Check if downward slope
        var solved = false;
        for (var i = 0; i &lt;= climb; i++)
        {
            // If is collision
            if (place_meeting(x + move, y + i + 1, parentGround))
            {
                // Move
                x += move;
                y += i;
                solved = true;
                break;
            }
        }
        
        // Keep moving
        if (!solved)
        {
            x += move;
        }
    }
}

// Update vsp
repeat(ceil(abs(vsp)))
{
    var move = sign(vsp);
    
    // Check if colliding
    if (place_meeting(x, y + move, parentGround))
    {
        // Stop; a floor/ceiling!
        vsp = 0;
    }
    else
    {
        // Keep moving
        y += move;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
